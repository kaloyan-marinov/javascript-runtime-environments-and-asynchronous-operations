In JavaScript, asynchronous execution comes in multiple forms.

    Asynchronous execution can be scheduled by means of "the callback syntax".
    On the one hand,
    when used directly, that syntax is hard to read;
    On the other hand,
    at a fundamental level
    that syntax is really the only way to schedule asynchronous execution
    (so you cannot avoid using callbacks).

    Fortunately, you donâ€™t have to use callbacks directly.
    The JavaScript language provides a mechanism for encapsulating callbacks,
    and that mechanism is based on the `Promise` object.

        (
        Essentially, a `Promise` is a returned object to which you attach callbacks,
        instead of passing callbacks into a function.
        )
    
        (
        A `Promise` can be created from scratch using its constructor.
        This should be needed only to wrap old APIs.

        In an ideal world, all asynchronous functions would already return `Promise`s.

        Unfortunately, some APIs still expect success and/or failure callbacks to be
        passed in the old way.
        The most obvious example is the `setTimeout()` function
        )

    JavaScript provides an even more convenient syntax for managing `Promise`s:
    "the `async`/`await` syntax".